#!/usr/bin/env bash

if [[ -z $1 ]]; then
  echo "Error: missing argument for binary to lint"
  echo "USAGE: $0 BINARY"
  exit 1
fi

imposter="$1"

# Check we can call imposter
echo "" | $imposter > /dev/null 2>&1
if [[ ! $? -eq 0 ]]; then
	echo "ERROR: failed to call $imposter"
	exit 1
fi


file1=/tmp/cat_linter_file1
file2=/tmp/cat_linter_file2
file1_content="test\nsomething\nhere"
file2_content="other\nthings\nhere"
echo -e "$file1_content" > $file1
echo -e "$file2_content" > $file2

function compare_output {
  if [[ "$1" == "$2" ]]; then
    echo "  Output matches"
  else
    echo "  ERROR: Output didn't match"
    echo
    echo -e "  Expected: '$1'"
    echo -e "       Got: '$2'"
    echo
    exit 1
  fi
}

function compare_exit {
  if [[ $1 -eq $2 ]]; then
    echo "  Exit matches"
  else
    echo "ERROR: Exit code didn't match"
    echo
    echo -e "  Expected: '$1'"
    echo -e "       Got: '$2'"
    echo
    exit 1
  fi
}

echo "Linting cat against $imposter"

# The command:
#
#       cat file1
#
# will print the contents of file1 to the standard output.

echo -e "\nChecking \`cat $file1\`":

cat_output=$(cat $file1)
cat_exit=$?
imposter_output=$($imposter $file1)
imposter_exit=$?

compare_output "$cat_output" "$imposter_output"
compare_exit $cat_exit $imposter_exit

echo -e "\nChecking \`cat $file1 $file2\`"

cat_output=$(cat $file1 $file2)
cat_exit=$?
imposter_output=$($imposter $file1 $file2)
imposter_exit=$?

compare_output "$cat_output" "$imposter_output"
compare_exit $cat_exit $imposter_exit

echo -e "\nChecking \`cat $file1 non-existent-file \`"

cat_output=$(cat $file1 /tmp/non-existent-file 2>&1)
cat_exit=$?
imposter_output=$($imposter $file1 /tmp/non-existent-file 2>&1)
imposter_exit=$?

compare_output "$cat_output" "$imposter_output"
compare_exit $cat_exit $imposter_exit

echo -e "\nChecking \`echo \"hi\\\nnow\" | cat\`"

cat_output=$(echo -e "hi\nnow" | cat)
cat_exit=$?
imposter_output=$(echo -e "hi\nnow" | $imposter)
imposter_exit=$?

compare_output "$cat_output" "$imposter_output"
compare_exit $cat_exit $imposter_exit

echo -e "\nChecking \`echo \"how\\\nnow\\\nbrown\\\ncow\" | cat $file1 - $file2\`"

cat_output=$(echo -e "how\nnow\nbrown\ncow" | cat $file1 - $file2 2>&1)
cat_exit=$?
imposter_output=$(echo -e "how\nnow\nbrown\ncow" | $imposter $file1 - $file2 2>&1)
imposter_exit=$?

compare_output "$cat_output" "$imposter_output"
compare_exit $cat_exit $imposter_exit

echo -e "\nChecking \`echo \"how\\\nnow\\\nbrown\\\ncow\" | cat $file1 - /tmp/non-existent-file - $file2\`"

cat_output=$(echo -e "how\nnow\nbrown\ncow" | cat $file1 - /tmp/non-existent-file - $file2 2>&1)
cat_exit=$?
imposter_output=$(echo -e "how\nnow\nbrown\ncow" | $imposter $file1 - /tmp/non-existent-file - $file2 2>&1)
imposter_exit=$?

compare_output "$cat_output" "$imposter_output"
compare_exit $cat_exit $imposter_exit

if which socat > /dev/null 2> /dev/null; then
  socket_child=0

  function setup_socket() {
    socket="$1"
    rm -f "${socket}"
    (echo -e "Linting my cat" | exec socat STDIN "UNIX-LISTEN:${socket}") &
    socket_child=$!
    while ! test -S "${socket}"
    do
      sleep 0.1
    done
  }

  function cleanup_socket() {
    if [[ $socket_child -ne 0 ]]; then
      kill $socket_child
    fi
  }

  echo -e "\nChecking UNIX socket reading capabilities"

  socket="/tmp/cat_linter.sock"
  setup_socket "${socket}"

  cat_output=$(cat ${socket} 2>&1)
  cat_exit=$?
  cleanup_socket

  setup_socket "${socket}"
  imposter_output=$(${imposter} ${socket} 2>&1)
  imposter_exit=$?
  cleanup_socket

  compare_output "$cat_output" "$imposter_output"
  compare_exit $cat_exit $imposter_exit
else
  echo -e "\nNot checking UNIX socket reading capabilities - install socat for that\n"
fi
